{"version":3,"sources":["assets/imgs/cloudy.svg","assets/imgs/sunny.svg","components/main.jsx","reportWebVitals.js","index.js"],"names":["Main","props","showPosition","position","fetchData","toggleTemp","val","Math","floor","toggleView","setState","temp","toggleDaysandHr","view","state","currently","days","navigator","geolocation","getCurrentPosition","this","document","querySelector","classList","add","alert","timeout","longEnUSFormatter","Intl","DateTimeFormat","year","month","day","todayDate","format","Date","weatherUrl","coords","latitude","longitude","fetch","method","headers","then","resp","json","data","console","log","timeZone","timezone","daily","hours","hourly","catch","err","className","onClick","length","src","icon","cloudy","sunny","alt","apparentTemperatureHigh","temperatureMax","temperatureLow","summary","map","hourData","index","time","getHours","toLocaleString","apparentTemperature","getDate","temperatureHigh","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.89344e18.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/cloudy.799926f7.svg\";","export default __webpack_public_path__ + \"static/media/sunny.14a5c542.svg\";","import React from 'react';\nimport cloudy from '../assets/imgs/cloudy.svg'\nimport sunny from '../assets/imgs/sunny.svg'\n\nclass Main extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            temp: 'f',\n            view: 'h',\n            currently: {},\n            days: []\n        };\n    }\n\n    componentDidMount() {\n        // if (navigator.geolocation) {\n        // document.querySelector(\".loader-wrapper\").classList.remove('d-none')\n        navigator.geolocation.getCurrentPosition(this.showPosition,\n            () => {\n                document.querySelector(\".loader-wrapper\").classList.add('d-none')\n                alert('location services failed due to unknown error, please try again later')\n            }, { timeout: 100000 })\n\n        const longEnUSFormatter = new Intl.DateTimeFormat('en-GB', {\n            year: 'numeric',\n            month: 'long',\n            day: 'numeric',\n        })\n        this.setState({\n            todayDate: longEnUSFormatter.format(new Date())\n        })\n    }\n    // }\n    // run after accepting location \n    showPosition = (position) => {\n        this.fetchData(position)\n    }\n    // fetch data deponds on the long & lat\n    async fetchData(position) {\n        // https://cors-anywhere.herokuapp.com/\n        const weatherUrl = `https://thingproxy.freeboard.io/fetch/https://api.darksky.net/forecast/a177f8481c31fa96c3f95ad4f4f84610/${position.coords.latitude},${position.coords.longitude}/`\n        await fetch(weatherUrl, {\n            method: 'GET',\n            headers: {\n                'Access-Control-Allow-Origin': 'https://ahmedswaby.github.io'\n            },\n        })\n            .then((resp) => {\n                return resp.json()\n            })\n            .then((data) => {\n                console.log('here');\n                document.querySelector(\".loader-wrapper\").classList.add('d-none')\n                this.setState({\n                    timeZone: data.timezone,\n                    days: data.daily.data,\n                    hours: data.hourly.data\n                })\n                console.log(this.state.hours);\n\n            }).catch(err => {\n                document.querySelector(\".loader-wrapper\").classList.add('d-none')\n                console.log(err);\n            })\n\n    }\n    // toggle temp between C & F\n    toggleTemp = (val) => {\n        return Math.floor((val - 32) / 1.8)\n    }\n    // toggle view depond on temp's C / F\n    toggleView = (val) => {\n        this.setState({\n            temp: val\n        })\n    }\n    // toggle between days & hours tabs\n    toggleDaysandHr = (val) => {\n        this.setState({\n            view: val\n        })\n    }\n\n    render() {\n        return (\n            <section>\n                <div className=\"loader-wrapper\">\n                    <div className=\"loader\"></div>\n                </div>\n                <div className='container'>\n                    <header>\n                        <h4 className=\"text-uppercase\">\n                            instaweather\n                        </h4>\n                        {/* toggle temp from C to F & vise verse */}\n                        <div className=\"d-flex ml-auto\">\n                            <button key='c' className={`btn text-white ${this.state.temp === 'c' ? 'active' : ''}`} onClick={() => this.toggleView('c')}>\n                                C\n                            </button>\n                            <button key='f' className={`btn text-white ${this.state.temp === 'f' ? 'active' : ''}`} onClick={() => this.toggleView('f')}>\n                                F\n                            </button>\n                        </div>\n                    </header>\n                    <main>\n                        <div className=\"row\">\n                            <div className=\"col-md-6\">\n                                <div className=\"d-flex flex-column\">\n                                    <h2>\n                                        {this.state.timeZone}\n                                    </h2>\n                                    <span>{this.state.todayDate}</span>\n                                    {this.state.days.length > 0 ?\n                                        <img src={this.state.days[0].icon === 'partly-cloudy-day' ? cloudy : sunny} alt=\"\" className=\"mr-auto\" />\n                                        :\n                                        false\n                                    }\n\n                                </div>\n                            </div>\n                            <div className=\"col-md-6\">\n                                {this.state.days.length > 0 ?\n                                    <div className=\"align-content-end d-flex flex-column text-end\">\n                                        {/* using first day to get min & max temp as it's not in the currently object */}\n                                        <h1>{this.state.temp === 'f' ? Math.floor(this.state.days[0].apparentTemperatureHigh)\n                                            : this.toggleTemp(this.state.days[0].apparentTemperatureHigh)}<sup>Â°</sup></h1>\n\n                                        {/* min & max temp */}\n                                        <h3>{this.state.temp === 'f' ? Math.floor(this.state.days[0].temperatureMax) : this.toggleTemp(this.state.days[0].temperatureMax)}<sup>Â°</sup> /\n\n                                        {this.state.temp === 'f' ? Math.floor(this.state.days[0].temperatureLow) : this.toggleTemp(this.state.days[0].temperatureLow)}<sup>Â°</sup></h3>\n                                        <p>{this.state.days[0].summary}</p>\n                                    </div>\n                                    :\n                                    false\n                                }\n                            </div>\n                        </div>\n                        <div className=\"border-bottom mb-4\">\n                            <button className={`btn pl-0 pr-0 ${this.state.view === 'h' ? 'active' : ''}`}\n                                onClick={() => this.toggleDaysandHr('h')}>\n                                hourly\n                            </button>\n                            <button className={`btn ${this.state.view === 'd' ? 'active' : ''}`} onClick={() => this.toggleDaysandHr('d')}>\n                                daily\n                            </button>\n                        </div>\n                        {this.state.view === 'h' ?\n                            <div className=\"d-flex overflow-scroll pb-4\">\n                                {this.state.hours ?\n                                    // if condition to avoid getting undifined error\n                                    this.state.hours.map((hourData, index) =>\n                                        <div className=\"hourly-section\" key={index}>\n                                            <p className=\"text-capitalize\">{`${new Date(hourData.time * 1000).getHours().toLocaleString()}:00`}</p>\n                                            <img src={hourData.icon === \"partly-cloudy-day\" ? cloudy : sunny} alt=\"sunny day\" />\n                                            <h4>{this.state.temp === 'f' ? Math.floor(hourData.apparentTemperature) : this.toggleTemp(hourData.apparentTemperature)}<sup>Â°</sup></h4>\n                                        </div>)\n                                    : false\n                                }\n                            </div>\n                            :\n                            this.state.days ?\n                                <div className=\"d-flex overflow-scroll pb-4\">\n                                    {this.state.days.map((day, index) =>\n                                        <div className=\"hourly-section\" key={index}>\n                                            <p className=\"text-capitalize\">{new Date(day.time * 1000).getDate().toLocaleString()}</p>\n                                            <img src={day.icon === \"partly-cloudy-day\" ? cloudy : sunny} alt=\"sunny day\" />\n                                            <h4>{this.state.temp === 'f' ? Math.floor(day.temperatureHigh) : this.toggleTemp(day.temperatureHigh)}<sup>Â°</sup></h4>\n                                        </div>\n                                    )}\n                                </div>\n                                : false\n                        }\n                    </main>\n                </div>\n            </section>\n        )\n    }\n}\n\nexport default Main","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport Main from './components/main';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<Main />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}